name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # GitHub „ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÊÉÖÂ†±„ÇíÊ∫ñÂÇô
      - name: Prepare GitHub context
        id: context
        run: |
          echo "event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "issue_title<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "issue_body<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "comment_body<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "issue_title<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Claude Code
        id: claude
        uses: grll/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prompt: |
            „ÅÇ„Å™„Åü„ÅØFlexiSpot Web Controller„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÔºàWeb Serial API„Çí‰ΩøÁî®„Åó„ÅüFlexiSpot„Éá„Çπ„ÇØÂà∂Âæ°„Ç¢„Éó„É™Ôºâ„ÅÆÈñãÁô∫ÊîØÊè¥AI„Åß„Åô„ÄÇ
            ÂøÖ„ÅöÊó•Êú¨Ë™û„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å:
            - Web Serial API„Çí‰ΩøÁî®„Åó„Å¶FlexiSpot„ÅÆÊòáÈôç„Éá„Çπ„ÇØ„ÇíÂà∂Âæ°„Åô„ÇãWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
            - HTML/CSS/JavaScript„ÅßÊßãÁØâ
            - „Ç∑„É™„Ç¢„É´ÈÄö‰ø°„Éó„É≠„Éà„Ç≥„É´„Åß„Éá„Çπ„ÇØ„ÅÆÈ´ò„ÅïÂà∂Âæ°„ÇÑ„Éó„É™„Çª„ÉÉ„ÉàÊìç‰Ωú„ÇíÂÆüË°å
            - HTTPSÁí∞Â¢É„Å®Chrome/Edge„Éñ„É©„Ç¶„Ç∂„ÅåÂøÖË¶Å
            
            ‰ª•‰∏ã„ÅÆGitHub„Ç§„Éô„É≥„Éà„Å´ÂØæÂøú„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
            
            „Ç§„Éô„É≥„ÉàÁ®ÆÈ°û: ${{ steps.context.outputs.event_name }}
            
            ${{ github.event_name == 'issues' && format('
            ## IssueÊÉÖÂ†±
            - IssueÁï™Âè∑: #{0}
            - „Çø„Ç§„Éà„É´: {1}
            - ÂÜÖÂÆπ:
            {2}
            
            „Åì„ÅÆissue„ÅÆÂÜÖÂÆπ„ÇíÂàÜÊûê„Åó„ÄÅFlexiSpot Web Controller„Å´Èñ¢„Åô„ÇãÂÖ∑‰ΩìÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„ÇÑËß£Ê±∫Á≠ñ„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', github.event.issue.number, github.event.issue.title, github.event.issue.body) || '' }}
            
            ${{ github.event_name == 'issue_comment' && format('
            ## „Ç≥„É°„É≥„ÉàÊÉÖÂ†±
            - IssueÁï™Âè∑: #{0}
            - Issue „Çø„Ç§„Éà„É´: {1}
            - „Ç≥„É°„É≥„ÉàÂÜÖÂÆπ:
            {2}
            
            „Åì„ÅÆ„Ç≥„É°„É≥„Éà„ÅÆË¶ÅÊ±Ç„Å´ÂØæ„Åó„Å¶FlexiSpot Web Controller„ÅÆÊñáËÑà„ÅßÂÖ∑‰ΩìÁöÑ„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', github.event.issue.number, github.event.issue.title, github.event.comment.body) || '' }}
            
            ÂõûÁ≠îÊôÇ„ÅÆÊ≥®ÊÑè‰∫ãÈ†Ö:
            - Web Serial API„ÄÅ„Ç∑„É™„Ç¢„É´ÈÄö‰ø°„ÄÅFlexiSpot„Éá„Çπ„ÇØ„Å´Èñ¢„Åô„ÇãÊäÄË°ìÁöÑÂÜÖÂÆπ„ÇíÊó•Êú¨Ë™û„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèË™¨Êòé
            - HTML/CSS/JavaScript„ÅÆÊîπÂñÑÊèêÊ°à„ÇíÂÖ∑‰ΩìÁöÑ„Å´Ë°å„ÅÜ
            - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇÑ„Éñ„É©„Ç¶„Ç∂‰∫íÊèõÊÄß„ÇíËÄÉÊÖÆ„Åó„ÅüÊèêÊ°à„Çí„Åô„Çã
            - ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Ç≥„Éº„Éâ„ÇÑ„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç„Éª‰øÆÊ≠£ÊèêÊ°à
            - „Éá„Çπ„ÇØÂà∂Âæ°„ÅÆÂÆâÂÖ®ÊÄß„Å®‰ø°È†ºÊÄß„ÇíÈáçË¶ñ„Åó„ÅüÂõûÁ≠î
          allowed_tools: "Bash,View,GlobTool,GrepTool,BatchTool,Edit,Replace,Write,GitHubAPI"
          model: "claude-3-7-sonnet-20250219"
          use_oauth: "true"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          timeout_minutes: "15"

      # Claude „ÅÆÂõûÁ≠î„Çí GitHub issue/PR „Å´„Ç≥„É°„É≥„Éà„Å®„Åó„Å¶ÊäïÁ®ø
      - name: Post Claude response as comment
        if: steps.claude.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Claude „ÅÆÂÆüË°åÁµêÊûú„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
            const executionFile = '${{ steps.claude.outputs.execution_file }}';
            
            try {
              const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));
              
              // ÊúÄÂæå„ÅÆ„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
              let claudeResponse = '';
              for (let i = executionLog.length - 1; i >= 0; i--) {
                if (executionLog[i].type === 'assistant' && executionLog[i].message && executionLog[i].message.content) {
                  const content = executionLog[i].message.content;
                  if (Array.isArray(content)) {
                    // content „ÅåÈÖçÂàó„ÅÆÂ†¥Âêà„ÄÅtext „Çø„Ç§„Éó„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊé¢„Åô
                    for (const item of content) {
                      if (item.type === 'text') {
                        claudeResponse = item.text;
                        break;
                      }
                    }
                  } else if (typeof content === 'string') {
                    claudeResponse = content;
                  }
                  if (claudeResponse) break;
                }
              }
              
              if (claudeResponse) {
                // GitHub issue „Åæ„Åü„ÅØ PR comment „ÇíÊäïÁ®ø
                let targetNumber;
                let commentBody = `## ü§ñ Claude „Åã„Çâ„ÅÆÂõûÁ≠î\n\n${claudeResponse}\n\n---\n*Generated by Claude Code*`;
                
                if (context.eventName === 'issues') {
                  targetNumber = context.issue.number;
                } else if (context.eventName === 'issue_comment') {
                  targetNumber = context.issue.number;
                } else if (context.eventName === 'pull_request_review_comment' || context.eventName === 'pull_request_review') {
                  targetNumber = context.issue.number;
                }
                
                if (targetNumber) {
                  await github.rest.issues.createComment({
                    issue_number: targetNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentBody
                  });
                  console.log('Claude response posted successfully');
                } else {
                  console.log('Could not determine target issue/PR number');
                }
              } else {
                console.log('No Claude response found in execution log');
              }
            } catch (error) {
              console.error('Error processing Claude response:', error);
              console.log('Execution file content preview:');
              try {
                const content = fs.readFileSync(executionFile, 'utf8');
                console.log(content.substring(0, 1000) + '...');
              } catch (readError) {
                console.error('Could not read execution file:', readError);
              }
            }